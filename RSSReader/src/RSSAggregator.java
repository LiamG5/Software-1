import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;
import components.xmltree.XMLTree;
import components.xmltree.XMLTree1;

/**
 * Program to convert an XML RSS (version 2.0) feed from a given URL into the
 * corresponding HTML output file.
 *
 * @author Liam G.
 *
 */
public final class RSSAggregator {

    /**
     * Private constructor so this utility class cannot be instantiated.
     */
    private RSSAggregator() {
    }

    /**
     * Outputs the "closing" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * </table>
     * </body> </html>
     *
     * @param out
     *            the output stream
     *
     * @updates out.contents
     *
     * @requires out.is_open
     *
     * @ensures out.content = #out.content * [the HTML "closing" tags]
     */
    private static void outputFooter(SimpleWriter out) {
        assert out != null : "Violation of: out is not null";
        assert out.isOpen() : "Violation of: out.is_open";

        out.println("</table>\n</body> </html>");

    }

    /**
     * Finds the first occurrence of the given tag among the children of the
     * given {@code XMLTree} and return its index; returns -1 if not found.
     *
     * @param xml
     *            the {@code XMLTree} to search
     * @param tag
     *            the tag to look for
     * @return the index of the first child of type tag of the {@code XMLTree}
     *         or -1 if not found
     * @requires [the label of the root of xml is a tag]
     * @ensures <pre>
     * getChildElement =
     *  [the index of the first child of type tag of the {@code XMLTree} or
     *   -1 if not found]
     * </pre>
     */
    private static int getChildElement(XMLTree xml, String tag) {
        assert xml != null : "Violation of: xml is not null";
        assert tag != null : "Violation of: tag is not null";
        assert xml.isTag() : "Violation of: the label root of xml is a tag";
        int ans = -1;

        for (int i = 0; i < xml.numberOfChildren(); i++) {
            if (xml.child(i).label().equals(tag)) {
                ans = i;
                i = xml.numberOfChildren();

            }

        }
        return ans;
    }

    /**
     * Outputs the "opening" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * <html> <head> <title>the channel tag title as the page title</title>
     * </head> <body>
     * <h1>the page title inside a link to the <channel> link</h1>
     * <p>
     * the channel description
     * </p>
     * <table border="1">
     * <tr>
     * <th>Date</th>
     * <th>Source</th>
     * <th>News</th>
     * </tr>
     *
     * @param channel
     *            the channel element XMLTree
     *
     * @param out
     *            the output stream
     *
     * @updates out.content
     *
     * @requires [the root of channel is a <channel> tag] and out.is_open
     *
     * @ensures out.content = #out.content * [the HTML "opening" tags]
     */
    private static void outputHeader(XMLTree channel, SimpleWriter out) {
        assert channel != null : "Violation of: channel is not null";
        assert out != null : "Violation of: out is not null";
        assert channel.isTag() && channel.label().equals("channel") : ""
                + "Violation of: the label root of channel is a <channel> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        String title = "Empty Title";
        String url = "";
        String des = "";

        if (getChildElement(channel, "title") > -1) {
            title = channel.child(getChildElement(channel, "title")).child(0)
                    .label();
        }
        if (getChildElement(channel, "link") > -1) {
            url = channel.child(getChildElement(channel, "link")).child(0)
                    .label();
        }
        if (getChildElement(channel, "description") > -1) {
            des = channel.child(getChildElement(channel, "description"))
                    .child(0).label();
        }

        out.println("<html> <head> <title>" + title + "</title>");
        out.println("</head> <body>");
        out.println("<h1> <a href = \"" + url + "\">" + title + "</a></h1>");
        out.println("<p>\n" + des + "\n</p>");
        out.println("<table border=\"1\">\n<tr>");
        out.println("<th>Date</th>");
        out.println("<th>Source</th>");
        out.println("<th>News</th>\n</tr>");

    }

    /**
     * Processes one news item and outputs one table row. The row contains three
     * elements: the publication date, the source, and the title (or
     * description) of the item.
     *
     * @param item
     *            the news item
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the label of the root of item is an <item> tag] and
     *           out.is_open
     * @ensures <pre>
     * out.content = #out.content *
     *   [an HTML table row with publication date, source, and title of news item]
     * </pre>
     */
    private static void processItem(XMLTree item, SimpleWriter out) {
        assert item != null : "Violation of: item is not null";
        assert out != null : "Violation of: out is not null";
        assert item.isTag() && item.label().equals("item") : ""
                + "Violation of: the label root of item is an <item> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        String urls = "";
        String url = "";
        String source = "No source available";
        String title = "No title available";
        String date = "No date available";

        if (getChildElement(item, "title") > -1) {
            if (item.child(getChildElement(item, "title"))
                    .numberOfChildren() > 0) {
                title = item.child(getChildElement(item, "title")).child(0)
                        .label();
            }
        }
        if (getChildElement(item, "link") > -1) {
            if (item.child(getChildElement(item, "title"))
                    .numberOfChildren() > 0) {
                url = item.child(getChildElement(item, "link")).child(0)
                        .label();
            }
        }
        if (getChildElement(item, "source") > -1) {
            if (item.child(getChildElement(item, "source"))
                    .hasAttribute("url")) {
                urls = item.child(getChildElement(item, "source"))
                        .attributeValue("url");
            }

            if (item.child(getChildElement(item, "source"))
                    .numberOfChildren() > 0) {
                source = item.child(getChildElement(item, "source")).child(0)
                        .label();
            }

        }

        if (getChildElement(item, "pubDate") > -1) {
            if (item.child(getChildElement(item, "pubDate"))
                    .numberOfChildren() > 0) {
                date = item.child(getChildElement(item, "pubDate")).child(0)
                        .label();
            }
        }
        out.println("<tr>");
        out.println("<td>" + date + "</td>");
        out.println("<td> <a href = \"" + urls + "\">" + source + "</a> </td>");
        out.println("<td> <a href = \"" + url + "\">" + title + "</a> </td>");
        out.println("</tr>");

    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();
        String fileName = "";

        String url = "";
        boolean vaild = true;
        boolean vaild1 = true;
        while (vaild) {

            out.print("Enter the URL of the feeds: ");
            url = in.nextLine();
            XMLTree xmltest = new XMLTree1(url);

            if (!(xmltest.hasAttribute("title"))) {

                out.println("Not a vaild feed");
            } else {
                vaild = false;
            }
        }
        while (vaild1) {
            out.print("Enter the file name(must include .html): ");
            fileName = in.nextLine();

            if (!fileName.endsWith(".html")) {
                out.println("does not end in .html");
            } else {
                vaild1 = false;
            }
        }
        XMLTree feeds = new XMLTree1(url);
        SimpleWriter prime = new SimpleWriter1L(fileName);

        prime.println("<html> <head> <title>" + feeds.attributeValue("title")
                + "</title>");
        prime.println("</head> <body>");
        prime.println("<h2>" + feeds.attributeValue("title") + "</h2>");
        prime.println("<ul>");

        for (int i = 0; i < feeds.numberOfChildren(); i++) {

            XMLTree xml = new XMLTree1(feeds.child(i).attributeValue("url"));
            XMLTree channel = xml.child(0);
            String title = "";
            if ((xml.label().equals("rss"))
                    && (xml.attributeValue("version").equals("2.0"))) {

                if (getChildElement(channel, "title") > -1) {
                    if (channel.child(getChildElement(channel, "title"))
                            .numberOfChildren() > 0) {
                        title = channel.child(getChildElement(channel, "title"))
                                .child(0).label();
                    }
                }

                String line = "";
                if (feeds.child(i).hasAttribute("file")) {
                    line = feeds.child(i).attributeValue("file");
                }
                SimpleWriter feed = new SimpleWriter1L(line);
                outputHeader(channel, feed);

                for (int j = 0; j < channel.numberOfChildren(); j++) {
                    if (channel.child(j).label().equals("item")) {
                        processItem(channel.child(j), feed);
                    }
                }

                outputFooter(feed);

                prime.println("<li>");
                prime.println("<a href = \"" + line + "\">" + title + "</a>");
                prime.println("</li>");

                feed.close();
            }
        }
        prime.println("</ul>");
        prime.println("</body>");
        prime.println("</html>");
        prime.close();
        in.close();
        out.close();
    }

}
